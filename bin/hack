#!/usr/bin/ruby

root_path = __dir__.sub(/(?<=\/)\w+$/, '')

require_relative '../lib/string'
require_relative '../lib/color'
require_relative '../lib/matrix'
include EscSequence

require 'figlet'
font = Figlet::Font.new(root_path + 'data/fonts/big.flf')
figlet = Figlet::Typesetter.new(font)

$termcap = `stty -a <"$(tty)"`

$lines = $termcap.gsub(/.*?(rows)\s*(\d+).*/m, '\\2').to_i
$columns = $termcap.gsub(/.*?(columns)\s*(\d+).*/m, '\\2').to_i
$center_line = $lines / 2
$center_column = $columns / 2

@alienlang = File.read(root_path + 'data/text/chars').gsub(/\s/m, '').chars

@red = color :rgb256_fg, '500'
@redbg = color :rgb256, '555', '500'
@green = color :rgb256, '050'
@normal = (style_on :reset)

def progress(title, tail = '', on = color(:rgb256, '555', '030'))
    puts
    on.set_bold
    off = color(:rgb256, '555', '000')
    n = 50
    str = title.center(n)
    print "\r#{off}[#{str}]"
    cursor :col, 2
    print on
    str.chars.each do |c|
        print c
        sleep 0.04
    end
    puts "\n#{@normal}#{tail.center(n + 2)}\n\n"
end

def alien_language(n = 100)
    (0..n).each do |line|
        s = @alienlang.shuffle.join
        puts "s = #{s}"
        pos = rand($lines - 8)
        print "\e[#{pos};1H"
        bright = (($lines - pos) / $lines.to_f)
        gradient [160 + line, 0.3, bright], [320 - line, 1, 0], s

        posc = rand($columns)
        bright = (($columns - posc) / $columns.to_f)
        s = s[0, $lines - 4]
        gradient_col [180 + line, 0.3, bright], [320 - line, 1, 0.0], s, posc
        sleep 0.03
    end
end

def alien_gibberish(n)
    @alienlang.shuffle[0, n] * ''
end

@ascii_gibberish = ('!'..'~').to_a << (0..10).to_a * 8
def ascii_gibberish(n)
    Array.new(n) { |_i| @ascii_gibberish.sample } * ''
end

@matrix_gibberish = File.read(root_path + 'data/text/matrix_gibberish').chars

def matrix_gibberish(n)
    Array.new(n) { |_i| @matrix_gibberish.sample } * ''
end

def type(s, line = nil, sec = 0.06, wait = 0.9)
    print "\e[#{line};0H" if line
    print "#{@green}\r> \e[K"
    print "\e]50;CursorShape=0\C-G"
    sleep wait
    s.chars.each { |c| print c; sleep sec }
    puts "\e[0m\e]50;CursorShape=1\C-G"
end

def clear_lines
    console_kill_lines 10, 13
    cursor :line, 10
end

screen :new

alien_language 20

print @green
banner = figlet['LEGION  HACKER'] + "\n" * 5
cia_banner = figlet['   C   I   A'] + "\n" * 5

print banner

cursor :line, 10
progress 'LOADING', 'READY'

target = 'CIA'
type "HACK #{target.upcase}"

clear_lines
cursor :line, 10
puts "ðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸ’€#{@red}#{'WARNING'.blink.bold}\e[0m ðŸ’€ðŸ’€ðŸ’€ðŸ’€ðŸ’€"
puts "#{@red} YOU ARE ABOUT TO HACK #{target}.#{@green}"
print_kill '  Do you wish to continue?'

sleep 1.2
type 'CONTINUE', 14

clear_lines
progress 'Hacking ' + target, "\e[1;05m#{@red}#{' RESTRICTED ACCESS ONLY '.center(50, '*')}\e[0m"

type 'CRACK PASSWORD && OVERRIDE ALL SECURITY', 14, 0.08, 0.2
sleep 0.25

alien_language 20

stra = (1..$lines).map { |i| EscSequence.line(i) << EscSequence.kill }
cia_banner.split(/\n/).each.with_index { |s, i| stra[i] << s }

address = (0..3).map { |_i| rand(255) } * '.'

stra[10] << @green.to_s << 'ACCESS GRANTED'.center(50)
stra[11] << @normal.to_s <<
    "Connected to #{target} at #{address}".center(50) <<
    @green

print @green
stra.shuffle.each do |s|
    print s
    sleep 0.035
end

cursor :line, 14
type 'SCAN DATABASE && DOWNLOAD RECORDS'
clear_lines
progress 'Scanning database', '78651 records found.'

cursor :up, 4
progress 'Downloading records', 'Download complete.'

type 'ANALYZE DATA && ENHANCE'
clear_lines
progress 'Analyzing data', '237 Visual Basic GUIs found.'
sleep 0.25
cursor :up, 4
progress 'Enhancing', '3,359,974 Visual Basic GUIs found.'

sleep 0.25
type 'DECRYPT DATA'
clear_lines

decrypted = ' WE ARE THE ILLUMINATI '

cursor :line, 10
cursor :save

181.times do |i|
    s = matrix_gibberish(32) << ' ' * 8
    cursor :restore
    gradient [6 * i, 0.5, 1.0], [10 * i, 1.0, 1.0], s
    len = (decrypted.length * (i / 180.0)).round
    cursor :restore
    print "\n\r\e[K"
    print decrypted[0..len] << s[0] << "\e[7m \e[27m\n\r\e[K"
    sleep 0.05
end

cursor :line, 11
console_kill_line
print decrypted.to_s.color(:rgb256_fg, '500')

cursor :line, 14
type 'UPLOAD VIRUS'
clear_lines
progress 'ðŸ’€ðŸ’€ðŸ’€ðŸ’€ Uploading virus ðŸ’€ðŸ’€ðŸ’€ðŸ’€', 'Virus installation successful.', @redbg

type 'INITIALIZE SELF-DESTRUCT SEQUENCE'
clear_lines
progress 'ðŸ’€ðŸ’€ðŸ’€ðŸ’€  INITIALIZING SELF-DESTRUCT  ðŸ’€ðŸ’€ðŸ’€ðŸ’€', 'Self-destruction in progress.', @redbg

matrix

screen :reset
hashes = '#' * $columns
str = '       HACKING  COMPLETE     '
press_any_key = '  PRESS ANY KEY TO CONTINUE  '.center($columns, '#')
linestart = $center_line - 2

(0..255).each do |i|
    print color :truecolor_fg, 0, i, 0
    print hashes.at_line(linestart)
    print hashes.at_line(linestart + 1)
    print str.blink.at_pos(linestart + 1, ($columns - str.length) / 2 + 1)
    print press_any_key.at_line(linestart + 2)
    print hashes.at_line(linestart + 3)
    print "\n\r"
    sleep 0.002
end

sleep 5
screen :restore
